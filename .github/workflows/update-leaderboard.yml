name: Update Leaderboard

on:
  repository_dispatch:
    types: [new-score]
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Added: Allow workflow to write to repository contents
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Create leaderboard directory if needed
        run: mkdir -p leaderboard
        
      - name: Process new score
        id: process-score
        run: |
          echo "Processing score: ${{ github.event.client_payload.nick }} - ${{ github.event.client_payload.score }}"
          echo "player=${{ github.event.client_payload.nick }}" >> $GITHUB_OUTPUT
          echo "score=${{ github.event.client_payload.score }}" >> $GITHUB_OUTPUT
          echo "date=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
          
      - name: Update scores.json
        run: |
          SCORES_FILE="leaderboard/scores.json"
          
          # Create file with empty array if it doesn't exist
          if [ ! -f "$SCORES_FILE" ]; then
            echo "[]" > "$SCORES_FILE"
          fi
          
          # Add new score and keep top 3
          node -e "
            const fs = require('fs');
            const scoresFile = 'leaderboard/scores.json';
            
            // Read current scores
            let scores = [];
            try {
              scores = JSON.parse(fs.readFileSync(scoresFile, 'utf8'));
            } catch (e) {
              scores = [];
            }
            
            // Add new score
            scores.push({
              name: '${{ steps.process-score.outputs.player }}',
              score: parseInt('${{ steps.process-score.outputs.score }}'),
              date: '${{ steps.process-score.outputs.date }}'
            });
            
            // Sort by score (descending)
            scores.sort((a, b) => b.score - a.score);
            
            // Keep only top 3
            scores = scores.slice(0, 3);
            
            // Write back to file
            fs.writeFileSync(scoresFile, JSON.stringify(scores, null, 2));
            
            console.log('Updated leaderboard with new score');
          "
          
      - name: Update README.md
        run: |
          node -e "
            const fs = require('fs');
            const scores = JSON.parse(fs.readFileSync('leaderboard/scores.json', 'utf8'));
            const readmeContent = fs.readFileSync('README.md', 'utf8');
            
            // Create leaderboard markdown table
            let leaderboardTable = '## 🏆 Leaderboard\\n\\n';
            leaderboardTable += '| Rank | Player&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Score&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |\\n';
            leaderboardTable += '|:----:|:-----------------------------|:-----------------|:-----------------------|\\n';
            
            scores.forEach((score, index) => {
              const rank = index + 1;
              const rankEmoji = rank === 1 ? '🥇' : rank === 2 ? '🥈' : rank === 3 ? '🥉' : '';
              // Pad player name and score for better visual spacing if needed, or rely on column width
              const playerName = score.name.padEnd(28, ' '); // Example padding
              const scoreStr = String(score.score).padEnd(15, ' ');
              const dateStr = score.date.padEnd(20, ' ');
              leaderboardTable += `| ${rankEmoji} ${rank} | ${playerName} | ${scoreStr} | ${dateStr} |\\n`;
            });
            
            // Check if leaderboard section already exists
            const leaderboardRegex = /## 🏆 Leaderboard[\s\S]*?(?=##|$)/;
            
            let newReadmeContent;
            if (leaderboardRegex.test(readmeContent)) {
              // Replace existing leaderboard section
              newReadmeContent = readmeContent.replace(leaderboardRegex, leaderboardTable + '\n\n');
            } else {
              // Add leaderboard section at the end
              newReadmeContent = readmeContent + '\n\n' + leaderboardTable;
            }
            
            fs.writeFileSync('README.md', newReadmeContent);
            console.log('Updated README.md with leaderboard');
          "
          
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'auto: update leaderboard'
          add: |
            leaderboard/scores.json
            README.md
