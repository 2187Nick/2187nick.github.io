{"version":3,"file":"snake-CmZjd-Tl.js","sources":["../../src/SnakeGame.jsx","../../src/snake-main.jsx"],"sourcesContent":["import { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\r\nimport {\r\n  ReactFlow,\r\n  Background,\r\n  useNodesState,\r\n} from \"@xyflow/react\";\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Button = ({ style = {}, children, ...rest }) => (\r\n  <button\r\n    {...rest}\r\n    style={{ \r\n      padding: \"8px 12px\", \r\n      borderRadius: \"4px\", \r\n      backgroundColor: \"#404040\", \r\n      border: \"none\",\r\n      color: \"white\",\r\n      cursor: \"pointer\",\r\n      fontSize: \"14px\",\r\n      transition: \"background-color 0.2s, transform 0.2s\",\r\n      ...style\r\n    }}\r\n    onMouseOver={(e) => { e.currentTarget.style.backgroundColor = \"#525252\"; }}\r\n    onMouseOut={(e) => { e.currentTarget.style.backgroundColor = \"#404040\"; }}\r\n    onMouseDown={(e) => { e.currentTarget.style.transform = \"scale(0.95)\"; }}\r\n    onMouseUp={(e) => { e.currentTarget.style.transform = \"scale(1)\"; }}\r\n    onTouchStart={(e) => { e.currentTarget.style.transform = \"scale(0.95)\"; }}\r\n    onTouchEnd={(e) => { e.currentTarget.style.transform = \"scale(1)\"; }}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nconst GRID_SIZE = 20;\r\nconst CELL_SIZE = 30;\r\nconst INITIAL_SNAKE = [{ x: 10, y: 10 }];\r\nconst DIRECTIONS = {\r\n  UP: { x: 0, y: -1 },\r\n  DOWN: { x: 0, y: 1 },\r\n  LEFT: { x: -1, y: 0 },\r\n  RIGHT: { x: 1, y: 0 }\r\n};\r\n\r\nexport default function SnakeGame() {\r\n  const [nodes, setNodes] = useNodesState([]);\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\r\n  const [food, setFood] = useState({ x: 15, y: 10 });\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(\r\n    parseInt(localStorage.getItem('snakeHighScore')) || 0\r\n  );\r\n  const [gameActive, setGameActive] = useState(false);\r\n\r\n  const generateFood = useCallback(() => {\r\n    let newFood;\r\n    do {\r\n      newFood = {\r\n        x: Math.floor(Math.random() * GRID_SIZE),\r\n        y: Math.floor(Math.random() * GRID_SIZE)\r\n      };\r\n    } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\r\n    return newFood;\r\n  }, [snake]);\r\n\r\n  const handleGameOver = useCallback(() => {\r\n    setIsGameOver(true);\r\n    setGameActive(false);\r\n    if (score > highScore) {\r\n      setHighScore(score);\r\n      localStorage.setItem('snakeHighScore', score.toString());\r\n    }\r\n  }, [score, highScore]);\r\n\r\n  const resetGame = useCallback(() => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setDirection(DIRECTIONS.RIGHT);\r\n    setFood(generateFood());\r\n    setScore(0);\r\n    setIsGameOver(false);\r\n    setGameActive(true);\r\n  }, [generateFood]);\r\n\r\n  const moveSnake = useCallback(() => {\r\n    if (!gameActive || isGameOver) return;\r\n\r\n    setSnake(currentSnake => {\r\n      const newHead = {\r\n        x: (currentSnake[0].x + direction.x + GRID_SIZE) % GRID_SIZE,\r\n        y: (currentSnake[0].y + direction.y + GRID_SIZE) % GRID_SIZE\r\n      };\r\n\r\n      // Check for collision with self\r\n      if (currentSnake.some(segment => segment.x === newHead.x && segment.y === newHead.y)) {\r\n        handleGameOver();\r\n        return currentSnake;\r\n      }\r\n\r\n      const newSnake = [newHead, ...currentSnake];\r\n      let isGrowing = false;\r\n\r\n      console.log(\"Old Head:\", currentSnake[0]);\r\n      console.log(\"New Head:\", newHead);\r\n      console.log(\"Food Position:\", food);\r\n      const headOnFood = newHead.x === food.x && newHead.y === food.y;\r\n      console.log(\"Is head on food?\", headOnFood);\r\n\r\n      // Check if food is eaten\r\n      if (headOnFood) {\r\n        setScore(s => s + 1);\r\n        setFood(generateFood());\r\n        isGrowing = true;\r\n        console.log(\"Snake is GROWING.\");\r\n      } else {\r\n        newSnake.pop();\r\n        console.log(\"Snake is MOVING (not growing).\");\r\n      }\r\n\r\n      return newSnake;\r\n    });\r\n  }, [direction, food, gameActive, isGameOver, generateFood, handleGameOver]);\r\n\r\n  // Game loop\r\n  useEffect(() => {\r\n    const gameLoop = setInterval(moveSnake, 150);\r\n    return () => clearInterval(gameLoop);\r\n  }, [moveSnake]);\r\n\r\n  // Keyboard controls\r\n  useEffect(() => {\r\n    const handleKeyPress = (e) => {\r\n      if (!gameActive) return;\r\n\r\n      const keyHandlers = {\r\n        ArrowUp: () => setDirection(current => \r\n          current === DIRECTIONS.DOWN ? current : DIRECTIONS.UP),\r\n        ArrowDown: () => setDirection(current => \r\n          current === DIRECTIONS.UP ? current : DIRECTIONS.DOWN),\r\n        ArrowLeft: () => setDirection(current => \r\n          current === DIRECTIONS.RIGHT ? current : DIRECTIONS.LEFT),\r\n        ArrowRight: () => setDirection(current => \r\n          current === DIRECTIONS.LEFT ? current : DIRECTIONS.RIGHT)\r\n      };\r\n\r\n      if (keyHandlers[e.key]) {\r\n        e.preventDefault();\r\n        keyHandlers[e.key]();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [gameActive]);\r\n\r\n  // Update nodes for rendering\r\n  useEffect(() => {\r\n    const snakeNodes = snake.map((segment, index) => ({\r\n      id: `snake-${index}`,\r\n      position: { x: segment.x * CELL_SIZE, y: segment.y * CELL_SIZE },\r\n      type: 'default',\r\n      data: { label: '' },\r\n      style: {\r\n        width: CELL_SIZE - 2,\r\n        height: CELL_SIZE - 2,\r\n        backgroundColor: index === 0 ? '#4CAF50' : '#388E3C',\r\n        border: 'none',\r\n        borderRadius: '4px'\r\n      }\r\n    }));\r\n\r\n    const foodNode = {\r\n      id: 'food',\r\n      position: { x: food.x * CELL_SIZE, y: food.y * CELL_SIZE },\r\n      type: 'default',\r\n      data: { label: 'üçé' },\r\n      style: {\r\n        width: CELL_SIZE - 2,\r\n        height: CELL_SIZE - 2,\r\n        backgroundColor: 'transparent',\r\n        border: 'none',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '20px'\r\n      }\r\n    };\r\n\r\n    setNodes([...snakeNodes, foodNode]);\r\n  }, [snake, food, setNodes]);\r\n\r\n  // Calculate viewport dimensions\r\n  const viewport = useMemo(() => ({\r\n    x: 0,\r\n    y: 0,\r\n    zoom: 0.8\r\n  }), []);\r\n\r\n  return (\r\n    <div style={{ \r\n      height: \"100vh\", \r\n      width: \"100%\", \r\n      display: \"flex\", \r\n      flexDirection: \"column\", \r\n      backgroundColor: \"#000000\",\r\n      color: \"white\"\r\n    }}>\r\n      <motion.div\r\n        initial={{ y: -50, opacity: 0 }}\r\n        animate={{ y: 0, opacity: 1 }}\r\n        style={{\r\n          textAlign: \"center\",\r\n          backgroundColor: \"#0f172a\",\r\n          padding: \"12px 0\",\r\n          borderBottom: \"2px solid #4CAF50\",\r\n          boxShadow: \"0 4px 12px rgba(76, 175, 80, 0.4)\"\r\n        }}\r\n      >\r\n        <h1 style={{\r\n          margin: 0,\r\n          fontSize: window.innerWidth < 768 ? \"24px\" : \"32px\",\r\n          background: \"linear-gradient(to right, #4CAF50, #81c784)\",\r\n          WebkitBackgroundClip: \"text\",\r\n          WebkitTextFillColor: \"transparent\"\r\n        }}>\r\n          SNAKE GAME\r\n        </h1>\r\n      </motion.div>\r\n\r\n      <motion.div\r\n        initial={{ y: -50, opacity: 0 }}\r\n        animate={{ y: 0, opacity: 1 }}\r\n        style={{\r\n          padding: \"16px\",\r\n          display: \"flex\",\r\n          gap: \"16px\",\r\n          alignItems: \"center\",\r\n          backgroundColor: \"#000000\",\r\n          borderBottom: \"1px solid #333\"\r\n        }}\r\n      >\r\n        <Button onClick={resetGame}>\r\n          {gameActive ? \"Restart\" : \"Start Game\"}\r\n        </Button>\r\n        <span style={{ marginLeft: \"auto\", fontSize: \"14px\", color: \"#4CAF50\" }}>\r\n          Score: {score} | High Score: {highScore}\r\n        </span>\r\n      </motion.div>\r\n\r\n      <div style={{ flex: 1, position: \"relative\" }}>\r\n        <ReactFlow\r\n          nodes={nodes}\r\n          edges={[]}\r\n          nodesDraggable={false}\r\n          nodesConnectable={false}\r\n          nodesFocusable={false}\r\n          panOnDrag={false}\r\n          zoomOnScroll={false}\r\n          panOnScroll={false}\r\n          defaultViewport={viewport}\r\n        >\r\n          <Background gap={CELL_SIZE} size={1} color=\"#333333\" />\r\n        </ReactFlow>\r\n      </div>\r\n\r\n      {gameActive && window.innerWidth < 768 && (\r\n        <div style={{\r\n          padding: \"20px\",\r\n          backgroundColor: \"#000000\",\r\n          borderTop: \"1px solid #333\"\r\n        }}>\r\n          <div style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"repeat(3, 1fr)\",\r\n            gap: \"10px\",\r\n            maxWidth: \"300px\",\r\n            margin: \"0 auto\"\r\n          }}>\r\n            <button\r\n              onClick={() => setDirection(DIRECTIONS.UP)}\r\n              style={{\r\n                gridColumn: \"2\",\r\n                padding: \"15px\",\r\n                backgroundColor: \"#4CAF50\",\r\n                border: \"none\",\r\n                borderRadius: \"8px\",\r\n                color: \"white\",\r\n                fontSize: \"20px\"\r\n              }}\r\n            >‚¨ÜÔ∏è</button>\r\n            <button\r\n              onClick={() => setDirection(DIRECTIONS.LEFT)}\r\n              style={{\r\n                gridColumn: \"1\",\r\n                gridRow: \"2\",\r\n                padding: \"15px\",\r\n                backgroundColor: \"#4CAF50\",\r\n                border: \"none\",\r\n                borderRadius: \"8px\",\r\n                color: \"white\",\r\n                fontSize: \"20px\"\r\n              }}\r\n            >‚¨ÖÔ∏è</button>\r\n            <button\r\n              onClick={() => setDirection(DIRECTIONS.RIGHT)}\r\n              style={{\r\n                gridColumn: \"3\",\r\n                gridRow: \"2\",\r\n                padding: \"15px\",\r\n                backgroundColor: \"#4CAF50\",\r\n                border: \"none\",\r\n                borderRadius: \"8px\",\r\n                color: \"white\",\r\n                fontSize: \"20px\"\r\n              }}\r\n            >‚û°Ô∏è</button>\r\n            <button\r\n              onClick={() => setDirection(DIRECTIONS.DOWN)}\r\n              style={{\r\n                gridColumn: \"2\",\r\n                gridRow: \"3\",\r\n                padding: \"15px\",\r\n                backgroundColor: \"#4CAF50\",\r\n                border: \"none\",\r\n                borderRadius: \"8px\",\r\n                color: \"white\",\r\n                fontSize: \"20px\"\r\n              }}\r\n            >‚¨áÔ∏è</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport SnakeGame from './SnakeGame.jsx'\r\nimport { ReactFlowProvider } from '@xyflow/react'\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <React.StrictMode>\r\n    <ReactFlowProvider>\r\n      <SnakeGame />\r\n    </ReactFlowProvider>\r\n  </React.StrictMode>,\r\n)\r\n"],"names":["jsx","useState","useCallback","useEffect","index","useMemo","jsxs","ReactFlow"],"mappings":"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"}